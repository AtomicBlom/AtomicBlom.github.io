#theme AtomicBlog
#n -p Wyam.All

public static class BlogKeys
{
    public const string Description = nameof(Description);
    public const string Intro = nameof(Intro);
    public const string Navbar = nameof(Navbar);
    public const string Title = nameof(Title);
    public const string Lead = nameof(Lead);
    public const string Published = nameof(Published);
    public const string Tags = nameof(Tags);
    public const string ShowInNavbar = nameof(ShowInNavbar);
    public const string Image = nameof(Image);

    // Document (generated by pipelines)
    public const string Excerpt = nameof(Excerpt);
    public const string Content = nameof(Content);
    public const string Posts = nameof(Posts);
    public const string Tag = nameof(Tag);

    // ViewData
    public const string PostListDocuments = nameof(PostListDocuments);
}

public static class BlogPipelines
{
    public const string Posts = nameof(Posts);
    public const string RenderPosts = nameof(RenderPosts);
    public const string Tags = nameof(Tags);
    public const string Pages = nameof(Pages);
    public const string RenderPages = nameof(RenderPages);
    public const string Resources = nameof(Resources);
    public const string Feed = nameof(Feed);
}

Settings.Host = "atomicblom.github.io";
GlobalMetadata["Title"] = "Atomic Musings";
GlobalMetadata["Description"] = "Atomic units of thought";
GlobalMetadata["Intro"] = "Featuring topics like C#, Dynamics, SQL Server, JavaScript, Minecraft, Streaming";
 
 // Get the pages first so they're available in the navbar, but don't render until last
Pipelines.Add("Pages",
    ReadFiles("{!posts,**}/*.md"),
    FrontMatter(Yaml()),
    Markdown(),
    Concat(
        // Add any additional Razor pages
        ReadFiles("{!posts,!tags,**}/*.cshtml"),
        FrontMatter(Yaml())),
    Concat(
        // Add the posts index page
        ReadFiles("posts/index.cshtml"),
        FrontMatter(Yaml())),
    Concat(
        // Add the tags index page
        ReadFiles("tags/index.cshtml"),
        FrontMatter(Yaml())),
    WriteFiles(".html")
        .OnlyMetadata()
);

Pipelines.Add("Posts",
    ReadFiles("posts/*.md"),
    FrontMatter(Yaml()),
    Where((doc, ctx) => doc.ContainsKey("Published") && doc.Get<DateTime>("Published") <= DateTime.Today),
    Markdown(),
    Concat(
        // Add any posts written in Razor
        ReadFiles("posts/{!_,!index,}*.cshtml"),
        FrontMatter(Yaml())),
    OrderBy((doc, ctx) => doc.Get<DateTime>("Published")).Descending()
);

Pipelines.Add("Tags",
    ReadFiles("tags/tag.cshtml"),
    FrontMatter(Yaml()),
    GroupByMany("Tags", Documents("Posts")),
    Where((doc, ctx) => !string.IsNullOrEmpty(doc.String(Keys.GroupKey))),
    Meta("Tag", (doc, ctx) => doc.String(Keys.GroupKey)),
    Meta("Title", (doc, ctx) => doc.String(Keys.GroupKey)),
    Meta("Posts", (doc, ctx) => doc.List<IDocument>(Keys.GroupDocuments)),
    Meta(Keys.RelativeFilePath, (doc, ctx) =>
    {
        string tag = doc.String(Keys.GroupKey);
        return $"tags/{(tag.StartsWith(".") ? tag.Substring(1) : tag).ToLowerInvariant().Replace(' ', '-')}.html";
    }),
    Razor(),
    WriteFiles()
);

Pipelines.Add("RenderPosts",
    Documents("Posts"),
    Razor(),
    Excerpt()
        .SetMetadataKey("Excerpt"),
    Excerpt("div#content")
        .SetMetadataKey("Content")
        .GetOuterHtml(false),
    WriteFiles(".html"));

Pipelines.Add("Feed",
    Documents("RenderPosts"),
    GenerateFeeds(),
    WriteFiles());

Pipelines.Add("RenderPages",
    Documents("Pages"),
    Razor(),
    WriteFiles()
);

Pipelines.Add("Resources",
    CopyFiles("**/*{!.cshtml,!.md,}"));