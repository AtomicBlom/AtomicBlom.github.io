<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>Atomic Musings</title>
		<link>http://atomicblom.github.io/</link>
		<description>Atomic units of thought</description>
		<copyright>2018</copyright>
		<pubDate>Sun, 29 Apr 2018 10:32:27 GMT</pubDate>
		<lastBuildDate>Sun, 29 Apr 2018 10:32:27 GMT</lastBuildDate>
		<item>
			<title>Logging to a remote server in Dynamics online</title>
			<link>http://atomicblom.github.io/posts/logging-to-a-remote-server-in-dynamics-online</link>
			<description>&lt;p&gt;As I mentioned in &lt;a href="/Posts/a-poor-dynamics-plugin"&gt;a-poor-dynamics-plugin&lt;/a&gt;, diagnosing an issue can be challenging in Dynamics CRM Online. I have
not yet had the pleasure of working with an on-premise install of Dynamics. To simplify debugging issues in my
plugins, I felt it was desirable to log to a centralized log server.&lt;/p&gt;</description>
			<guid>http://atomicblom.github.io/posts/logging-to-a-remote-server-in-dynamics-online</guid>
			<pubDate>Thu, 11 Aug 2016 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;As I mentioned in &lt;a href="/Posts/a-poor-dynamics-plugin"&gt;a-poor-dynamics-plugin&lt;/a&gt;, diagnosing an issue can be challenging in Dynamics CRM Online. I have
not yet had the pleasure of working with an on-premise install of Dynamics. To simplify debugging issues in my
plugins, I felt it was desirable to log to a centralized log server.&lt;/p&gt;
&lt;p&gt;I like to reuse other people's work where possible, so I first started investigating using NLog, which we had been
using in the past for our projects and our newer code was already logging to Seq, so I was happy to find that there
was an NLog target for Seq.&lt;/p&gt;
&lt;p&gt;Adding a reference to &lt;a href="http://nlog-project.org"&gt;NLog&lt;/a&gt; was easy, and I wrote some preliminary configuration code to try it out.&lt;/p&gt;
&lt;p&gt;When I ran this in the Plugin Registration Replay, I learned a few things.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Replay tool will accurately sandbox your plugin as if it were running in CRM.&lt;/li&gt;
&lt;li&gt;All of your plugin's code must be contained within a single asembly.&lt;/li&gt;
&lt;li&gt;NLog's initialization process uses code that is prohibited within the sandbox.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first one is cool, it means that my code is highly likely to fail in the same manner as it would in CRM Online.&lt;/p&gt;
&lt;p&gt;The second point is annoying, but not insurmountable. ILMerge.MSBuild.Tasks NuGet package solved that issue by just
installing it, no further work was required (No furthwr work on the plugin itself at least, more on this in a later blog post).&lt;/p&gt;
&lt;p&gt;The third however is a complete roadblock. Try though I might, I couldn't figure out a way to avoid some filesystem
calls deep within the bowels of NLog.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://serilog.net/"&gt;Serilog&lt;/a&gt;, which is advocated by &lt;a href="https://getseq.net/"&gt;Seq&lt;/a&gt;, also suffers a similar problem, though if I recall correctly, the problem with
Serilog was reflecting over private properties, which is also disallowed by the sandbox.&lt;/p&gt;
&lt;p&gt;With NLog and Serilog being the only loggers that Seq natively supports, I decidedmit was time to unfortunately invest
in writing my own logging framework.&lt;/p&gt;
&lt;p&gt;I chose to keep ot as minimal as possible, recycling as little as possible from NLog, keeping the expected ILogger
interface and supporting Seq's structured logging.&lt;/p&gt;
&lt;p&gt;Something I noticed in my earliest tests were that my logs were rarely being sent.&lt;/p&gt;
&lt;p&gt;I do not know definitively what the problem was, but I suspect the most likely cause for this is the Replay tool
immediately killing the AppDomain and it's threads before flushing the logs had completed. Because of this, I
reluctantly implemented IDisposable and did the flush on the same thread as the plugin itself.&lt;/p&gt;
&lt;p&gt;This has some really bad implications though, because Seq uses HTTP POST to receive it's I still have to find a good way
to balance the 20 second time limit that is imposed on Plugins. If the logging service is down, there's a good chance
that CRM will rollback the transaction.&lt;/p&gt;
&lt;p&gt;I'm of the opinion that a logging service is a nice debugging tool, if you need tracability, use CRM's auditing, if the
logging service is down, everything should continue, so I expect further development into this train of thought.
Ideally I'd like to cause the AppDomain to delay unloading until a background thread is finished flushing.&lt;/p&gt;
&lt;p&gt;Another issue I have yet to find a really good solution to is where to store the configuration of the Seq server, and
it's normal for us to include the environment in our logging. I don't really like the idea of having to configure the
server address and api key on a per-message basis, and using an entity worries me as the startup behaviour of plugin
assemblies appears to be undefined, so I don't want to introduce another trip through the organisation service to discover
settings.&lt;/p&gt;
&lt;p&gt;I've decided in the short term to introduce the values via the build system and keep them in the assembly until a better
solution comes to me.&lt;/p&gt;
&lt;p&gt;I'll be putting the code on GitHub as soon as feasible.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>A Poor Dynamics Plugin</title>
			<link>http://atomicblom.github.io/posts/a-poor-dynamics-plugin</link>
			<description>&lt;p&gt;I'd like to show you a slightly modified version of a plugin. This was the first piece of code I had ever seen for the purpose of extending Microsoft Dynamics' backend.&lt;/p&gt;</description>
			<guid>http://atomicblom.github.io/posts/a-poor-dynamics-plugin</guid>
			<pubDate>Sun, 07 Aug 2016 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I'd like to show you a slightly modified version of a plugin. This was the first piece of code I had ever seen for the purpose of extending Microsoft Dynamics' backend.&lt;/p&gt;
&lt;p&gt;The reason I was asked to look at this code was because someone had changed something and the plugin was no longer working.&lt;/p&gt;
&lt;p&gt;The first bit of code I ever looked at for dynamics looked something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class WebInteraction : IPlugin
{
    /// &amp;lt;summary&amp;gt;
    /// Wrapper function for plugin.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;serviceProvider&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;
    public void Execute(IServiceProvider serviceProvider)
    {
        IPluginExecutionContext context = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));
        IOrganizationServiceFactory serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
        IOrganizationService service = serviceFactory.CreateOrganizationService(context.UserId);

        ITracingService tracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));
        
        Entity preImageEntity = new Entity();
        Guid OpportunityID = Guid.Empty;
        //The InputParameters collection contains all the data passed in the message request.
        try
        {
            if (context.Depth == 1)
            {
                string messageName = context.MessageName.ToUpper();

                if (messageName == &amp;quot;CREATE&amp;quot;)
                {
                    CreateHandler(context, service);
                }
                if (messageName == &amp;quot;UPDATE&amp;quot;)
                {
                    UpdateHandler(context, service);
                }
                if (messageName == &amp;quot;DELETE&amp;quot;)
                {
                    DeleteHandler(context, service);
                }

            }
            
        }
        catch (Exception ex)
        {
            tracingService.Trace(ex.Message);
        }
    }   // end of method Execute()

    private void CreateHandler(IPluginExecutionContext context, IOrganizationService service)
    {
        if (context.Stage == 20)    // pre-operation stage
        {

        }
        else if (context.Stage == 40)   // post-operation stage
        {
            if (context.InputParameters.Contains(&amp;quot;Target&amp;quot;) &amp;amp;&amp;amp; context.InputParameters[&amp;quot;Target&amp;quot;] is Entity)
            {
                Entity target = (Entity)context.InputParameters[&amp;quot;Target&amp;quot;];
                
                // only care if Type = Web,
                if (target.Contains(&amp;quot;new_type&amp;quot;) &amp;amp;&amp;amp; target.GetAttributeValue&amp;lt;OptionSetValue&amp;gt;(&amp;quot;new_type&amp;quot;).Value == 863580000)
                {
                    DoImportantBusinessLogic();
                }
            }
        }   // end of else if

    }   // end of method CreateHandler()

    private void UpdateHandler(IPluginExecutionContext context, IOrganizationService service)
    {
        if (context.Stage == 20)    // pre-operation stage
        {

        }
        else if (context.Stage == 40)   // post-operation stage
        {
            if (context.PostEntityImages.Contains(&amp;quot;PostImage&amp;quot;) &amp;amp;&amp;amp; context.PostEntityImages[&amp;quot;PostImage&amp;quot;] is Entity)
            {
                Entity postImage = context.PostEntityImages[&amp;quot;PostImage&amp;quot;];
                
            }
        }   // end of else if

    }   // end of method UpdateHandler()

    private void DeleteHandler(IPluginExecutionContext context, IOrganizationService service)
    {
        if (context.Stage == 20)    // pre-operation stage
        {

        }
        else if (context.Stage == 40)   // post-operation stage
        {
            if (context.PreEntityImages.Contains(&amp;quot;PreImage&amp;quot;) &amp;amp;&amp;amp; context.PreEntityImages[&amp;quot;PreImage&amp;quot;] is Entity)
            {
                Entity preImage = context.PreEntityImages[&amp;quot;PreImage&amp;quot;];
                
            }
        }   // end of else if

    }   // end of method DeleteHandler()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This strikes me as some code that someone has grabbed from a template, messed with the bare minimum to get it running and hasn't even stripped out the code that does nothing.&lt;/p&gt;
&lt;p&gt;I'm grateful that they at least left in the comments as to what context.Stage is, because if I'd just seen &lt;code&gt;if (context.Stage == 40)&lt;/code&gt; I'd be mighty confused.&lt;/p&gt;
&lt;p&gt;Let's strip this down to what they actually used.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class WebInteraction : IPlugin
{
    public void Execute(IServiceProvider serviceProvider)
    {
        var context = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));

        try
        {
            if (context.Depth != 1) { return; }
            if (context.Stage != 40) { return; } // post-operation stage
            if (!&amp;quot;CREATE&amp;quot;.equals(context.MessageName.ToUpper())) { return; }
            
            if (!context.InputParameters.Contains(&amp;quot;Target&amp;quot;) || !context.InputParameters[&amp;quot;Target&amp;quot;] is Entity) { return; }
            
            var target = (Entity)context.InputParameters[&amp;quot;Target&amp;quot;];
            
            // only care if Type = Web,
            if (target.Contains(&amp;quot;new_type&amp;quot;) &amp;amp;&amp;amp; target.GetAttributeValue&amp;lt;OptionSetValue&amp;gt;(&amp;quot;new_type&amp;quot;).Value == 863580000)
            {
                DoImportantBusinessLogic(context);
            }
        }
        catch (Exception ex)
        {
            var tracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));
            tracingService.Trace(ex.Message);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That wasn't so hard, so, to sum this up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the context must be Depth 1&lt;/li&gt;
&lt;li&gt;in Post-Operation stage (Stage 40)&lt;/li&gt;
&lt;li&gt;the message must be &amp;quot;Create&amp;quot;&lt;/li&gt;
&lt;li&gt;it must contain an InputParameter called &amp;quot;Target&amp;quot; which must be of type Entity&lt;/li&gt;
&lt;li&gt;the target must contain an attribute called &amp;quot;new_type&amp;quot; which has an option set value of 863580000, which the comment alludes to is &amp;quot;web&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Only after all this is met can the plugin execute its purpose.&lt;/p&gt;
&lt;p&gt;A few more things come to mind after cleaning this up.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Why are all the properties of Dynamics objects keyed by string?&lt;/li&gt;
&lt;li&gt;What is Depth?&lt;/li&gt;
&lt;li&gt;What are the stages?&lt;/li&gt;
&lt;li&gt;Why do option sets have such obtuse numbers behind them&lt;/li&gt;
&lt;li&gt;The plugin was clearly failing, how can I get those trace logs.&lt;/li&gt;
&lt;li&gt;Why catch and log? Why not report an error to the caller?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To add to all this and make things more interesting, we'll take a quick peek at an example of the business logic.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private void DoImportantBusinessLogic(IPluginExecutionContext context, IOrganizationService service, Entity interaction)
{
    string email = interaction.GetAttributeValue&amp;lt;string&amp;gt;(&amp;quot;new_email&amp;quot;);
    Entity contact = SearchContactByEmail(context, service, email);
    
    if (contact != null)
    {
        //Further Process account
    }
}

private EntityCollection SearchContactByEmail(IPluginExecutionContext context, IOrganizationService service, string email)
{
    string fetchXml = &amp;#64;&amp;quot;&amp;lt;fetch version='1.0' mapping='logical'&amp;gt;
                        &amp;lt;entity name='contact'&amp;gt;
                            &amp;lt;order attribute='modifiedon' descending='true' /&amp;gt;
                            &amp;lt;filter type='and'&amp;gt;
                                &amp;lt;condition attribute='statecode' operator='eq' value='0' /&amp;gt;
                                &amp;lt;condition attribute='emailaddress1' operator='eq' value='{0}' /&amp;gt;
                            &amp;lt;/filter&amp;gt;
                        &amp;lt;/entity&amp;gt;
                        &amp;lt;/fetch&amp;gt;&amp;quot;;

    fetchXml = string.Format(fetchXml, email);
    EntityCollection ec_contacts = service.RetrieveMultiple(new FetchExpression(fetchXml));

    return ec_contacts;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code at least is only the core logic, there's no extraneous boilerplate code here which is nice, other than their passing around the context and the IOrganizationService to every method.&lt;/p&gt;
&lt;p&gt;This code also suffers from the magic string madness for attribute values and then takes it to the next level using Dynamics' &amp;quot;FetchExpression&amp;quot; xml system.&lt;/p&gt;
&lt;p&gt;To figure out why the plugin wasn't working, I started with trying to get at the tracing service, and I was completely blindsided by the way the tracing service works, specifically with CRM Online.&lt;/p&gt;
&lt;p&gt;You see, in a CRM instance that has been provisioned using the on-premise version of CRM, the trace logs are actually available to you. In the Online version however, getting the trace logs requires a bit of work, some googling lead me to this workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start by Downloading the SDK.&lt;/li&gt;
&lt;li&gt;Open the PluginRegistration Tool&lt;/li&gt;
&lt;li&gt;Find the message that's failing&lt;/li&gt;
&lt;li&gt;Start profiling the message.&lt;/li&gt;
&lt;li&gt;(You may need to install the Plugin Tracing solution)&lt;/li&gt;
&lt;li&gt;Trigger the message on CRM&lt;/li&gt;
&lt;li&gt;You should get an error&lt;/li&gt;
&lt;li&gt;Inspect the error to get a package you can save to your PC.&lt;/li&gt;
&lt;li&gt;Go back to PluginRegistration Tool&lt;/li&gt;
&lt;li&gt;Open the Plugin Replay Tool&lt;/li&gt;
&lt;li&gt;Pass in your context from the error&lt;/li&gt;
&lt;li&gt;Give it the path to a copy of the assembly&lt;/li&gt;
&lt;li&gt;Invoke the plugin.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If all goes well, anything sent to the tracing service will be logged in the replay tool.&lt;/p&gt;
&lt;p&gt;If that doesn't give you enough information, you'll need to debug the plugin:
14. Attach Visual Studio to the PluginRegistation tool with your solution open
15. Set a breakpoint where you wish to inspect.
16. Invoke the plugin again.&lt;/p&gt;
&lt;p&gt;In my case, there were a few caveats to this. Turns out my message wasn't being invoked from the UI, but rather from an external API, with that in mind, and given the nature of the actual plugin, I'm not completely surprised that they weren't sending any information back to the service. It does however leave me wondering, how is a user of the system supposed to know that this business process failed? I have to go through 16 steps to figure out why as a developer?&lt;/p&gt;
&lt;p&gt;In my case, the error was that one of the columns that used to exist and no longer does, I spoke with the various power users, and one explained he had renamed it because it had been inappropriately and confusingly named to begin with.&lt;/p&gt;
&lt;p&gt;With that as my first experience, there were a few things I had resolved to do while I'm working on this system.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Introduce logging to an external log server.
&lt;ul&gt;
&lt;li&gt;This would give me insight into the fact there was an error in the first place&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use Strong typing for entities
&lt;ul&gt;
&lt;li&gt;Using CrmSvcUtil to generate classes for us means that a change in schema will break code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use Linq to CRM where possible
&lt;ul&gt;
&lt;li&gt;Linq is commonly used by my workmates, they're more likely to understand it than Fetch XML.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Refactor the code to support unit testing.
&lt;ul&gt;
&lt;li&gt;This means bringing out the core logic into a seperate class and splitting the inputs and outputs into their own mechanisms.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clean up the code using IoC.
&lt;ul&gt;
&lt;li&gt;passing around the context doesn't help you know what parts of the plugin need what.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Invest in continuous integration
&lt;ul&gt;
&lt;li&gt;The plugin should be doing a nightly build, and part of the nightly build should be updating the strong typing mappings.&lt;/li&gt;
&lt;li&gt;Any changes in schema can be caught nightly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Isolate your code from CRM
&lt;ul&gt;
&lt;li&gt;I've heard from others that CRM is easy to use, and easy to screw up.&lt;/li&gt;
&lt;li&gt;Separating my classes from the CRM interactions means I can adjust for anything I'm doing wrong relatively quicker&lt;/li&gt;
&lt;li&gt;Also, my code should be far easier to test and care less about misconfiguration issues like wrong message types and wrong stages.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Invest in continuous deployment.
&lt;ul&gt;
&lt;li&gt;make it so that a checkin on my code should run all the tests and deploy to the staging site.&lt;/li&gt;
&lt;li&gt;unit tests should pass before the code is deployed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Over the next few blog posts, I'll be discussing approaches to these points and how I've tackled them so far.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Hello Dynamics World</title>
			<link>http://atomicblom.github.io/posts/hello-dynamics-world</link>
			<description>&lt;p&gt;Over the last month and a bit or so at my work, I've been working on replacing a legacy system with Dynamics CRM.&lt;/p&gt;</description>
			<guid>http://atomicblom.github.io/posts/hello-dynamics-world</guid>
			<pubDate>Fri, 05 Aug 2016 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Over the last month and a bit or so at my work, I've been working on replacing a legacy system with Dynamics CRM.&lt;/p&gt;
&lt;p&gt;I'm optimistic that Regardless of how people feel about it, I think it will be a good fit for the system it's replacing.&lt;/p&gt;
&lt;p&gt;Straight out of the gate however, there are a number of things that worried me.&lt;/p&gt;
&lt;p&gt;First, the plugin code that I had been given had no tests, everything was static methods with raw linq-to-crm, so it
wasn't even designed with testing in mind.&lt;/p&gt;
&lt;p&gt;Secondly, the front end, a BA had written a bunch of JavaScript to add some nice features, but the JavaScript was
potentially quite buggy in the way it was implemented.&lt;/p&gt;
&lt;p&gt;Thirdly, I was entering the Dynamics scene with no training, and the knowledge that people have done a lot with
Dynamics, but it's also really easy to screw it up.&lt;/p&gt;
&lt;p&gt;With that in mind, I'd like to start a series of blog posts about how I reengineered our plugins with the following
goals in mind:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The plugins should be unit testable&lt;/li&gt;
&lt;li&gt;The plugins should use IoC framework so that they only contain what they need to function.&lt;/li&gt;
&lt;li&gt;The plugins should provide insight into how they're functioning&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Meanwhile on the frontend, I've set up a WebPack workflow to allow us to write ES6/7 JavaScript using Async/Await to
improve the readability and durabiliy of the JavaScript.&lt;/p&gt;
&lt;p&gt;It is my hope that my Blog will help others to write better code and provide a place where people can offer me advice
to how I can improve our workflow as well.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Minecraft server on Server Core? Totally Possible</title>
			<link>http://atomicblom.github.io/posts/minecraft-server-on-server-core</link>
			<description>&lt;p&gt;So seeing a couple of youtube videos got me inspired to try out a completely modded Minecraft Server. RedPower 2 looks pretty cool, and the Tekkit Server makes this super easy.&lt;/p&gt;</description>
			<guid>http://atomicblom.github.io/posts/minecraft-server-on-server-core</guid>
			<pubDate>Sat, 02 Jun 2012 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;So seeing a couple of youtube videos got me inspired to try out a completely modded Minecraft Server. RedPower 2 looks pretty cool, and the Tekkit Server makes this super easy.&lt;/p&gt;
&lt;p&gt;Anyway, I thought to try it out on a Windows Server 2012 Release Candidate VM.&lt;/p&gt;
&lt;p&gt;So, two thoughts, you will need to install Java on the VM. I installed 1.7 x64 with no issues.
You will need to open firewall ports:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PS C:\Windows\system32&amp;gt; New-NetFirewallRule -DisplayName “Minecraft” -Profile Domain -Direction Inbound -Action Allow -LocalPort &amp;#64;(“25565″) -Protocol TCP&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The latest JRE install will add java to the path, so after a restart, you can create a .bat file with the following (appropriate for a machine with 4GB RAM):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;java -Xmx3072M -Xms1536M -jar Tekkit.jar nogui&lt;/code&gt;&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Various useful powershell commands for Windows 8 Server (beta)</title>
			<link>http://atomicblom.github.io/posts/Various-useful-powershell-commands-for-Windows-8-Server-(beta)</link>
			<description>&lt;p&gt;I’ve been setting up a few instances of Windows 8 Server Core and couldn’t be bothered figuring out if CoreConfig works with Win8 so I thought I’d go the hard way and look at what cmdlets are provided for doing the most basic tasks I need such as:&lt;/p&gt;</description>
			<guid>http://atomicblom.github.io/posts/Various-useful-powershell-commands-for-Windows-8-Server-(beta)</guid>
			<pubDate>Tue, 10 Apr 2012 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I’ve been setting up a few instances of Windows 8 Server Core and couldn’t be bothered figuring out if CoreConfig works with Win8 so I thought I’d go the hard way and look at what cmdlets are provided for doing the most basic tasks I need such as:&lt;/p&gt;
&lt;p&gt;##Renaming a computer
&lt;code&gt;Rename-Computer -NewName Server001 -DomainCredential Domain01\Admin01 -Restart&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;##Get a desired network adapter’s interface index&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$adapterIndex = $(Get-NetIPAddress | where { $_.InterfaceAlias -eq &amp;quot;Wired Ethernet Connection&amp;quot; -and $_.AddressFamily -eq &amp;quot;IPv4&amp;quot; }).InterfaceIndex&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;##Change the adapter’s IP Address to a static one:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Remove-NetIPAddress -InterfaceIndex $adapterIndex -AddressFamily IPv4&lt;/code&gt;
&lt;code&gt;New-NetIPAddress -InterfaceIndex $adapterIndex -IPv4Address 192.168.0.2 -PrefixLength 24 -DefaultGateway 192.168.0.254&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;##Change the DNS Settings (I decided to keep the pre-existing IPv6 Settings, using Set-DnsClientServerAddress will wipe out both IPv4 and IPv6 settings.)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Set-DnsClientServerAddress -InterfaceIndex $adapterIndex -ServerAddresses &amp;#64;(&amp;quot;192.168.0.1&amp;quot;, &amp;quot;fec0:0:0:ffff::1&amp;quot;, &amp;quot;fec0:0:0:ffff::2&amp;quot;, &amp;quot;fec0:0:0:ffff::3&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;##Firewall Rules for SQL Server&lt;/p&gt;
&lt;p&gt;&lt;code&gt;New-NetFirewallRule -DisplayName &amp;quot;SQL Server Database&amp;quot; -Profile Domain -Direction Inbound -Action Allow -LocalPort &amp;#64;(&amp;quot;1433&amp;quot;, &amp;quot;1434&amp;quot;, &amp;quot;4022&amp;quot;, &amp;quot;135&amp;quot;) -Protocol TCP&lt;/code&gt;&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Flex: 1046: Type was not found or was not a compile-time constant:</title>
			<link>http://atomicblom.github.io/posts/Adobe-Flex-1046-Type-was-not-found-or-was-not-a-compile-time-constant</link>
			<description>&lt;p&gt;#The Problem
At my work, we have a legacy application known internally as “The Flex app”, maintaining this piece of software was the very reason I was hired, but as it turns out, Some of my other skills turned out to be more useful than my adaptability with new languages. Having said that, every now and then I need to do maintanence on this application, so, in accordance with the bug requests, I booted up Flex Builder 3.0.2 rolled back any outstanding changes and prepared to start again with a fresh slate. One problem: The clean project wouldn’t build.&lt;/p&gt;</description>
			<guid>http://atomicblom.github.io/posts/Adobe-Flex-1046-Type-was-not-found-or-was-not-a-compile-time-constant</guid>
			<pubDate>Mon, 16 Jan 2012 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;#The Problem
At my work, we have a legacy application known internally as “The Flex app”, maintaining this piece of software was the very reason I was hired, but as it turns out, Some of my other skills turned out to be more useful than my adaptability with new languages. Having said that, every now and then I need to do maintanence on this application, so, in accordance with the bug requests, I booted up Flex Builder 3.0.2 rolled back any outstanding changes and prepared to start again with a fresh slate. One problem: The clean project wouldn’t build.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1046: Type was not found or was not a compile-time constant: LogEntry&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;#The Investigation
Anybody with any experience with Flex would know the solution to this problem within seconds: You’re forgetting an import. Bring in your type and everything will be fine.&lt;/p&gt;
&lt;p&gt;Unfortunately, my case was not so simple. Three people checking, double checking, so on were not able to help me figure out why I had an undefined constant:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My Imports were in place&lt;/li&gt;
&lt;li&gt;The IDE recognised the types&lt;/li&gt;
&lt;li&gt;Removing them and using the IDE’s Autocomplete added the imports back in&lt;/li&gt;
&lt;li&gt;The Files containing the types were fine&lt;/li&gt;
&lt;li&gt;Removing the import and using the full package path did not solve the problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The fact that the IDE was able to find the types, but the compiler couldn’t intrigued me most and after a long time of scratching my head, I had one of my “Gut Feelings”&lt;/p&gt;
&lt;p&gt;As I’m primarily a C# developer, sometimes I forget what land I’m programming in. In this particular instance, I had imported my WCF services into flex and accidentally prefixed the package names with Uppercase letters, like .NET namespaces. During the lifecycle of working on the app, I had deleted and recreated the services using varying casing for packages.&lt;/p&gt;
&lt;p&gt;#The Solution
So, the solution was to make my filesystem folders consistent with the casing of the packages.&lt;/p&gt;
&lt;p&gt;#Final Thoughts
This is a “bug” in the compiler, the IDE is not affected by this problem. Clearly this would be an issue on Linux or on a case-sensitive OS X filesystem, but I was a little surprised to run against it on Windows.&lt;/p&gt;
&lt;p&gt;I can’t help but wonder if even Java is this pedantic about casing.&lt;/p&gt;
</content:encoded>
		</item>
	</channel>
</rss>